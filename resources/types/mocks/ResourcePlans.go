// Code generated by mockery v2.0.0-alpha.2. DO NOT EDIT.

package mocks

import (
	resourcestypes "github.com/projecteru2/core/resources/types"
	mock "github.com/stretchr/testify/mock"

	types "github.com/projecteru2/core/types"
)

// ResourcePlans is an autogenerated mock type for the ResourcePlans type
type ResourcePlans struct {
	mock.Mock
}

// ApplyChangesOnNode provides a mock function with given fields: _a0, _a1
func (_m *ResourcePlans) ApplyChangesOnNode(_a0 *types.Node, _a1 ...int) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Capacity provides a mock function with given fields:
func (_m *ResourcePlans) Capacity() map[string]int {
	ret := _m.Called()

	var r0 map[string]int
	if rf, ok := ret.Get(0).(func() map[string]int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int)
		}
	}

	return r0
}

// Dispense provides a mock function with given fields: _a0, _a1
func (_m *ResourcePlans) Dispense(_a0 resourcestypes.DispenseOptions, _a1 *types.Resources) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(resourcestypes.DispenseOptions, *types.Resources) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RollbackChangesOnNode provides a mock function with given fields: _a0, _a1
func (_m *ResourcePlans) RollbackChangesOnNode(_a0 *types.Node, _a1 ...int) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Type provides a mock function with given fields:
func (_m *ResourcePlans) Type() types.ResourceType {
	ret := _m.Called()

	var r0 types.ResourceType
	if rf, ok := ret.Get(0).(func() types.ResourceType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.ResourceType)
	}

	return r0
}
